"use strict";(self.webpackChunkstory_explorer=self.webpackChunkstory_explorer||[]).push([[316],{115:(e,t,r)=>{r.d(t,{A:()=>n});const n={BASE_URL:"https://story-api.dicoding.dev/v1",VAPID_PUBLIC_KEY:"BCCs2eonMI-6H2ctvFaWg-UYdDv387Vno_bzUzALpB442r2lCnsHmtrx8biyPi_E-1fSGABK_Qs_GlvPoJJqxbk",DEFAULT_MAP_CENTER:{lat:-6.2,lon:106.816666},MAP_OPTIONS:{DEFAULT_ZOOM:5,TILE_LAYER:{DEFAULT:"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",SATELLITE:"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}"}}}},316:(e,t,r)=>{r.r(t),r.d(t,{default:()=>o});var n=r(628);const o=class{constructor(){this._container=document.querySelector("#mainContent")}async render(){return'\n            <div class="offline-container">\n                <header class="offline-header">\n                    <h2>Mode Offline</h2>\n                    <p class="connection-status">\n                        <i class="fas fa-wifi-slash"></i> \n                        Anda sedang dalam mode offline\n                    </p>\n                </header>\n\n                <div class="offline-content">\n                    <div id="offlineStoryList" class="story-list"></div>\n                    <div id="emptyState" class="empty-state" style="display: none">\n                        <i class="fas fa-inbox"></i>\n                        <p>Tidak ada cerita tersimpan untuk mode offline</p>\n                    </div>\n                </div>\n\n                <div class="offline-info">\n                    <h3>Informasi Mode Offline</h3>\n                    <ul>\n                        <li>Cerita yang tersimpan dapat diakses tanpa koneksi internet</li>\n                        <li>Perubahan akan disinkronkan saat kembali online</li>\n                        <li>Fitur tambah cerita tetap tersedia dalam mode offline</li>\n                    </ul>\n                </div>\n            </div>\n        '}async afterRender(){await this._loadOfflineStories(),this._initializeEventListeners(),this._checkOnlineStatus()}async _loadOfflineStories(){try{const e=await n.A.getStories(),t=document.getElementById("offlineStoryList"),r=document.getElementById("emptyState");if(!e.length)return void(r.style.display="flex");t.innerHTML=e.map((e=>this._createStoryCard(e))).join("")}catch(e){console.error("Error loading offline stories:",e),this._showError("Gagal memuat cerita offline")}}_createStoryCard(e){return`\n            <article class="story-card" data-id="${e.id}">\n                <img src="${e.photoUrl}" \n                    alt="Foto cerita ${e.name}"\n                    class="story-image"\n                    loading="lazy">\n                <div class="story-details">\n                    <h3>${e.name}</h3>\n                    <p>${e.description}</p>\n                    <time datetime="${e.createdAt}">\n                        ${new Date(e.createdAt).toLocaleDateString("id-ID")}\n                    </time>\n                    <div class="story-actions">\n                        <button class="delete-story" data-id="${e.id}">\n                            <i class="fas fa-trash"></i> Hapus\n                        </button>\n                    </div>\n                </div>\n            </article>\n        `}_initializeEventListeners(){document.querySelectorAll(".delete-story").forEach((e=>{e.addEventListener("click",(async e=>{const t=e.target.dataset.id;confirm("Apakah Anda yakin ingin menghapus cerita ini?")&&await this._deleteStory(t)}))}))}async _deleteStory(e){try{await n.A.deleteStory(e),await this._loadOfflineStories(),this._showFeedback("Cerita berhasil dihapus")}catch(e){console.error("Error deleting story:",e),this._showError("Gagal menghapus cerita")}}_checkOnlineStatus(){window.addEventListener("online",(()=>{this._showFeedback("Koneksi tersedia, mengalihkan ke mode online..."),setTimeout((()=>{window.location.hash="#/home"}),2e3)}))}_showFeedback(e,t=!1){const r=document.createElement("div");r.className="feedback-message "+(t?"error":"success"),r.textContent=e,this._container.appendChild(r),setTimeout((()=>r.remove()),3e3)}_showError(e){this._showFeedback(e,!0)}async cleanup(){window.removeEventListener("online",this._checkOnlineStatus)}}},628:(e,t,r)=>{r.d(t,{A:()=>a}),r(115);const n="stories",o="offline-stories",s=()=>new Promise(((e,t)=>{const r=indexedDB.open("story-explorer-db",1);r.onerror=()=>{t(r.error)},r.onsuccess=()=>{e(r.result)},r.onupgradeneeded=e=>{const t=e.target.result;t.objectStoreNames.contains(n)||t.createObjectStore(n,{keyPath:"id"}).createIndex("createdAt","createdAt",{unique:!1}),t.objectStoreNames.contains(o)||t.createObjectStore(o,{keyPath:"id",autoIncrement:!0}).createIndex("timestamp","timestamp",{unique:!1})}})),a={async getStories(){try{const e=await s();return new Promise(((t,r)=>{const o=e.transaction(n,"readonly").objectStore(n).getAll();o.onsuccess=()=>t(o.result),o.onerror=()=>r(o.error)}))}catch(e){return console.error("Error getting stories:",e),[]}},async saveStories(e){try{const t=(await s()).transaction(n,"readwrite").objectStore(n);return await Promise.all(e.map((e=>new Promise(((r,n)=>{const o=t.put({...e,timestamp:(new Date).getTime()});o.onsuccess=()=>r(),o.onerror=()=>n(o.error)}))))),!0}catch(e){return console.error("Error saving stories:",e),!1}},async saveOfflineStory(e){try{const t=(await s()).transaction(o,"readwrite").objectStore(o);return new Promise(((r,n)=>{const o=t.add({...e,timestamp:(new Date).getTime(),synced:!1});o.onsuccess=()=>r(!0),o.onerror=()=>n(o.error)}))}catch(e){return console.error("Error saving offline story:",e),!1}},async getOfflineStories(){try{const e=(await s()).transaction(o,"readonly").objectStore(o);return new Promise(((t,r)=>{const n=e.getAll();n.onsuccess=()=>t(n.result),n.onerror=()=>r(n.error)}))}catch(e){return console.error("Error getting offline stories:",e),[]}},async deleteStory(e){try{const t=(await s()).transaction(n,"readwrite").objectStore(n);return new Promise(((r,n)=>{const o=t.delete(e);o.onsuccess=()=>r(!0),o.onerror=()=>n(o.error)}))}catch(e){return console.error("Error deleting story:",e),!1}},async clearOldStories(e=6048e5){try{const t=(await s()).transaction(n,"readwrite").objectStore(n).index("createdAt"),r=(new Date).getTime()-e,o=t.openCursor();return new Promise(((e,t)=>{o.onsuccess=t=>{const n=t.target.result;n?(n.value.timestamp<r&&n.delete(),n.continue()):e(!0)},o.onerror=()=>t(o.error)}))}catch(e){return console.error("Error clearing old stories:",e),!1}}}}}]);