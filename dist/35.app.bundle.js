"use strict";(self.webpackChunkstory_explorer=self.webpackChunkstory_explorer||[]).push([[35],{35:(e,t,n)=>{n.r(t),n.d(t,{default:()=>a}),n(110);const r=class{constructor(e){this._container=e,this._render(),this._initializeEventListeners()}_render(){this._container.innerHTML='\n            <div class="notification-preferences">\n                <h3>Pengaturan Notifikasi</h3>\n                <div class="preference-item">\n                    <label for="newStoryNotif">\n                        <input type="checkbox" id="newStoryNotif" name="newStoryNotif">\n                        Notifikasi Cerita Baru\n                    </label>\n                </div>\n                <div class="preference-item">\n                    <label for="commentNotif">\n                        <input type="checkbox" id="commentNotif" name="commentNotif">\n                        Notifikasi Komentar\n                    </label>\n                </div>\n                <button id="savePreferences" class="save-preferences">\n                    Simpan Pengaturan\n                </button>\n            </div>\n        '}async _initializeEventListeners(){const e=this._container.querySelector("#savePreferences");e&&e.addEventListener("click",(async()=>{await this._savePreferences()})),await this._loadPreferences()}async _savePreferences(){try{const e={newStory:this._container.querySelector("#newStoryNotif").checked,comments:this._container.querySelector("#commentNotif").checked};localStorage.setItem("notificationPreferences",JSON.stringify(e)),this._showFeedback("Pengaturan berhasil disimpan")}catch(e){console.error("Error saving preferences:",e),this._showFeedback("Gagal menyimpan pengaturan",!0)}}async _loadPreferences(){try{const e=localStorage.getItem("notificationPreferences");if(e){const t=JSON.parse(e);this._container.querySelector("#newStoryNotif").checked=t.newStory,this._container.querySelector("#commentNotif").checked=t.comments}}catch(e){console.error("Error loading preferences:",e)}}_showFeedback(e,t=!1){const n=document.createElement("div");n.className="notification-feedback "+(t?"error":"success"),n.textContent=e,this._container.appendChild(n),setTimeout((()=>n.remove()),3e3)}};var i=n(472);const a=class{constructor(){this._container=document.querySelector("#mainContent")}async render(){return`\n            <div class="profile-container">\n                <header class="profile-header">\n                    <h2>Profil Pengguna</h2>\n                </header>\n                \n                <div class="profile-content">\n                    <section class="user-info">\n                        <h3>Informasi Akun</h3>\n                        <div class="info-item">\n                            <span>Nama:</span>\n                            <span id="userName">${i.A.getUserInfo().name}</span>\n                        </div>\n                        <div class="info-item">\n                            <span>Email:</span>\n                            <span id="userEmail">${i.A.getUserInfo().email}</span>\n                        </div>\n                    </section>\n\n                    <section id="notificationSettings" class="notification-settings">\n                        \x3c!-- Notification preferences will be rendered here --\x3e\n                    </section>\n\n                    <section class="offline-settings">\n                        <h3>Pengaturan Offline</h3>\n                        <div class="setting-item">\n                            <label for="offlineStorage">\n                                <input type="checkbox" id="offlineStorage" name="offlineStorage">\n                                Simpan cerita untuk mode offline\n                            </label>\n                            <p class="setting-description">\n                                Mengaktifkan fitur ini akan menyimpan cerita untuk diakses saat offline\n                            </p>\n                        </div>\n                    </section>\n                </div>\n            </div>\n        `}async afterRender(){this._initializeNotificationPreferences(),this._initializeOfflineSettings(),this._attachEventListeners()}_initializeNotificationPreferences(){const e=document.getElementById("notificationSettings");e&&(this._notificationPreferences=new r(e))}_initializeOfflineSettings(){const e=document.getElementById("offlineStorage");e&&(e.checked="true"===localStorage.getItem("enableOfflineStorage"))}_attachEventListeners(){const e=document.getElementById("offlineStorage");e&&e.addEventListener("change",(e=>{localStorage.setItem("enableOfflineStorage",e.target.checked),this._showFeedback("Pengaturan offline berhasil disimpan")}))}_showFeedback(e,t=!1){const n=document.createElement("div");n.className="feedback-message "+(t?"error":"success"),n.textContent=e,this._container.appendChild(n),setTimeout((()=>n.remove()),3e3)}async cleanup(){}}},110:(e,t,n)=>{n.d(t,{A:()=>i}),n(115);var r=n(933);const i=class{static async initialize(){try{if(!("Notification"in window))throw new Error("Browser tidak mendukung notifikasi");if(!("serviceWorker"in navigator))throw new Error("Browser tidak mendukung Service Worker");if(!("PushManager"in window))throw new Error("Browser tidak mendukung Push Notification");if("granted"!==await Notification.requestPermission())throw new Error("Izin notifikasi tidak diberikan");return await this.registerServiceWorker(),await this.setupPeriodicSync(),!0}catch(e){return console.error("Inisialisasi notifikasi gagal:",e),!1}}static async setupPeriodicSync(){try{const e=await navigator.serviceWorker.ready;"periodicSync"in e&&"granted"===(await navigator.permissions.query({name:"periodic-background-sync"})).state&&await e.periodicSync.register("check-stories",{minInterval:864e5})}catch(e){console.error("Failed to setup periodic sync:",e)}}static async registerServiceWorker(){try{if("serviceWorker"in navigator)return await navigator.serviceWorker.register("/sw.js");throw new Error("Service Worker not supported")}catch(e){throw console.error("Failed to register service worker:",e),e}}static async subscribeToPush(e){try{const t=await navigator.serviceWorker.ready;let n=await t.pushManager.getSubscription();return n||(n=await t.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:this._urlBase64ToUint8Array("BCCs2eonMI-6H2ctvFaWg-UYdDv387Vno_bzUzALpB442r2lCnsHmtrx8biyPi_E-1fSGABK_Qs_GlvPoJJqxbk")})),await r.A.subscribePushNotification(e,{endpoint:n.endpoint,keys:{p256dh:this._arrayBufferToBase64(n.getKey("p256dh")),auth:this._arrayBufferToBase64(n.getKey("auth"))}}),n}catch(e){throw console.error("Failed to subscribe to push:",e),e}}static _arrayBufferToBase64(e){const t=String.fromCharCode.apply(null,new Uint8Array(e));return btoa(t)}static _urlBase64ToUint8Array(e){const t=(e+"=".repeat((4-e.length%4)%4)).replace(/\-/g,"+").replace(/_/g,"/"),n=window.atob(t),r=new Uint8Array(n.length);for(let e=0;e<n.length;++e)r[e]=n.charCodeAt(e);return r}static async showNotification(e,t={}){try{const n=await navigator.serviceWorker.ready,r={icon:"/icons/icon-192x192.png",badge:"/icons/icon-72x72.png",vibrate:[100,50,100],...t,data:{dateOfArrival:Date.now(),...t.data}};await n.showNotification(e,r)}catch(e){console.error("Failed to show notification:",e)}}static async unsubscribeFromPush(e){try{const t=await navigator.serviceWorker.ready,n=await t.pushManager.getSubscription();return!!n&&(await r.A.unsubscribePushNotification(e,n.endpoint),await n.unsubscribe(),!0)}catch(e){throw console.error("Failed to unsubscribe from push:",e),e}}}},115:(e,t,n)=>{n.d(t,{A:()=>r});const r={BASE_URL:"https://story-api.dicoding.dev/v1",VAPID_PUBLIC_KEY:"BCCs2eonMI-6H2ctvFaWg-UYdDv387Vno_bzUzALpB442r2lCnsHmtrx8biyPi_E-1fSGABK_Qs_GlvPoJJqxbk",DEFAULT_MAP_CENTER:{lat:-6.2,lon:106.816666},MAP_OPTIONS:{DEFAULT_ZOOM:5,TILE_LAYER:{DEFAULT:"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",SATELLITE:"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}"}}}},933:(e,t,n)=>{n.d(t,{A:()=>i});var r=n(115);const i=class{static async getStories(e,{page:t=1,size:n=10,location:i=1}={}){return(await fetch(`${r.A.BASE_URL}/stories?page=${t}&size=${n}&location=${i}`,{headers:{Authorization:`Bearer ${e}`}})).json()}static async addStory(e,{description:t,photo:n,lat:i,lon:a}){const s=new FormData;return s.append("description",t),s.append("photo",n),i&&a&&(s.append("lat",i),s.append("lon",a)),(await fetch(`${r.A.BASE_URL}/stories`,{method:"POST",headers:{Authorization:`Bearer ${e}`},body:s})).json()}static async login(e){const t=await fetch(`${r.A.BASE_URL}/login`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});return await t.json()}static async register(e,t,n){return(await fetch(`${r.A.BASE_URL}/register`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:e,email:t,password:n})})).json()}static async getStoryDetail(e,t){try{const n=await fetch(`${r.A.API_URL}/stories/${t}`,{headers:{Authorization:`Bearer ${e}`}});return await n.json()}catch(e){return console.error("Error fetching story detail:",e),{error:!0,message:e.message}}}static async addGuestStory(e){try{const t=new FormData;t.append("description",e.description),t.append("photo",e.photo),e.lat&&t.append("lat",e.lat),e.lon&&t.append("lon",e.lon);const n=await fetch(`${r.A.API_URL}/stories/guest`,{method:"POST",body:t});return await n.json()}catch(e){return console.error("Error adding guest story:",e),{error:!0,message:e.message}}}static async subscribePushNotification(e,t){try{const n=await fetch(`${r.A.BASE_URL}/notifications/subscribe`,{method:"POST",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},body:JSON.stringify({endpoint:t.endpoint,keys:{p256dh:t.keys.p256dh,auth:t.keys.auth}})});return await n.json()}catch(e){return console.error("Error subscribing to notifications:",e),{error:!0,message:e.message}}}static async unsubscribePushNotification(e,t){try{const n=await fetch(`${r.A.BASE_URL}/notifications/subscribe`,{method:"DELETE",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},body:JSON.stringify({endpoint:t})});return await n.json()}catch(e){return console.error("Error unsubscribing from notifications:",e),{error:!0,message:e.message}}}static async syncOfflineStories(e,t){try{return(await Promise.allSettled(t.map((t=>this.addStory(e,t))))).map(((e,n)=>({story:t[n],success:"fulfilled"===e.status,response:"fulfilled"===e.status?e.value:e.reason})))}catch(e){return console.error("Error syncing offline stories:",e),{error:!0,message:e.message}}}static async registerPushSubscription(e,t){try{const n=await fetch(`${r.A.BASE_URL}/push-registration`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e}`},body:JSON.stringify(t)});return await n.json()}catch(e){return console.error("Error registering push subscription:",e),{error:!0,message:e.message}}}static async checkConnectivity(){try{return(await fetch(`${r.A.BASE_URL}/ping`,{method:"HEAD"})).ok}catch{return!1}}static async retryFailedUploads(e,t){try{return(await Promise.allSettled(t.map((t=>this.addStory(e,t.data))))).map(((e,n)=>({originalUpload:t[n],success:"fulfilled"===e.status,response:"fulfilled"===e.status?e.value:e.reason})))}catch(e){return console.error("Error retrying failed uploads:",e),{error:!0,message:e.message}}}}}}]);