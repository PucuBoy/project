"use strict";(self.webpackChunkstory_explorer=self.webpackChunkstory_explorer||[]).push([[739],{115:(e,t,r)=>{r.d(t,{A:()=>s});const s={BASE_URL:"https://story-api.dicoding.dev/v1",VAPID_PUBLIC_KEY:"BCCs2eonMI-6H2ctvFaWg-UYdDv387Vno_bzUzALpB442r2lCnsHmtrx8biyPi_E-1fSGABK_Qs_GlvPoJJqxbk",DEFAULT_MAP_CENTER:{lat:-6.2,lon:106.816666},MAP_OPTIONS:{DEFAULT_ZOOM:5,TILE_LAYER:{DEFAULT:"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",SATELLITE:"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}"}}}},384:(e,t,r)=>{r.d(t,{A:()=>s});const s=class{constructor(e,t){this._apiService=e,this._auth=t}async getStories(e,t,r){const s=this._auth.getToken();return await this._apiService.getStories(s,{page:e,size:t,location:r})}async addStory(e){const t=this._auth.getToken();return await this._apiService.addStory(t,e)}async login(e,t){return await this._apiService.login({email:e,password:t})}async register(e){return await this._apiService.register(e)}setToken(e){this._auth.setToken(e)}removeToken(){this._auth.removeToken()}}},739:(e,t,r)=>{r.r(t),r.d(t,{default:()=>i});var s=r(384);const a=class{constructor(e,t){this._view=e,this._model=t}async register(e,t,r){try{return{success:!(await this._model.register({name:e,email:t,password:r})).error}}catch(e){return{success:!1,error:e.message||"Registration failed"}}}};var o=r(933),n=r(472);const i=class{constructor(){this._model=new s.A(o.A,n.A),this._presenter=new a(this,this._model)}async render(){return'\n            <div class="auth-container">\n                <h1>Register</h1>\n                <form id="registerForm" class="auth-form">\n                    <div class="form-group">\n                        <label for="name">Name</label>\n                        <input type="text" id="name" required>\n                    </div>\n                    <div class="form-group">\n                        <label for="email">Email</label>\n                        <input type="email" id="email" required>\n                    </div>\n                    <div class="form-group">\n                        <label for="password">Password</label>\n                        <input type="password" id="password" required>\n                    </div>\n                    <button type="submit">Register</button>\n                    <p>Already have an account? <a href="#/login">Login here</a></p>\n                </form>\n            </div>\n        '}async afterRender(){document.getElementById("registerForm").addEventListener("submit",(async e=>{e.preventDefault();const t=document.getElementById("name").value,r=document.getElementById("email").value,s=document.getElementById("password").value,a=await this._presenter.register(t,r,s);a.success?(alert("Registration successful! Please login."),window.location.hash="#/login"):alert(a.error)}))}}},933:(e,t,r)=>{r.d(t,{A:()=>a});var s=r(115);const a=class{static async getStories(e,{page:t=1,size:r=10,location:a=1}={}){return(await fetch(`${s.A.BASE_URL}/stories?page=${t}&size=${r}&location=${a}`,{headers:{Authorization:`Bearer ${e}`}})).json()}static async addStory(e,{description:t,photo:r,lat:a,lon:o}){const n=new FormData;return n.append("description",t),n.append("photo",r),a&&o&&(n.append("lat",a),n.append("lon",o)),(await fetch(`${s.A.BASE_URL}/stories`,{method:"POST",headers:{Authorization:`Bearer ${e}`},body:n})).json()}static async login(e){const t=await fetch(`${s.A.BASE_URL}/login`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});return await t.json()}static async register(e,t,r){return(await fetch(`${s.A.BASE_URL}/register`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:e,email:t,password:r})})).json()}static async getStoryDetail(e,t){try{const r=await fetch(`${s.A.API_URL}/stories/${t}`,{headers:{Authorization:`Bearer ${e}`}});return await r.json()}catch(e){return console.error("Error fetching story detail:",e),{error:!0,message:e.message}}}static async addGuestStory(e){try{const t=new FormData;t.append("description",e.description),t.append("photo",e.photo),e.lat&&t.append("lat",e.lat),e.lon&&t.append("lon",e.lon);const r=await fetch(`${s.A.API_URL}/stories/guest`,{method:"POST",body:t});return await r.json()}catch(e){return console.error("Error adding guest story:",e),{error:!0,message:e.message}}}static async subscribePushNotification(e,t){try{const r=await fetch(`${s.A.BASE_URL}/notifications/subscribe`,{method:"POST",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},body:JSON.stringify({endpoint:t.endpoint,keys:{p256dh:t.keys.p256dh,auth:t.keys.auth}})});return await r.json()}catch(e){return console.error("Error subscribing to notifications:",e),{error:!0,message:e.message}}}static async unsubscribePushNotification(e,t){try{const r=await fetch(`${s.A.BASE_URL}/notifications/subscribe`,{method:"DELETE",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},body:JSON.stringify({endpoint:t})});return await r.json()}catch(e){return console.error("Error unsubscribing from notifications:",e),{error:!0,message:e.message}}}static async syncOfflineStories(e,t){try{return(await Promise.allSettled(t.map((t=>this.addStory(e,t))))).map(((e,r)=>({story:t[r],success:"fulfilled"===e.status,response:"fulfilled"===e.status?e.value:e.reason})))}catch(e){return console.error("Error syncing offline stories:",e),{error:!0,message:e.message}}}static async registerPushSubscription(e,t){try{const r=await fetch(`${s.A.BASE_URL}/push-registration`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e}`},body:JSON.stringify(t)});return await r.json()}catch(e){return console.error("Error registering push subscription:",e),{error:!0,message:e.message}}}static async checkConnectivity(){try{return(await fetch(`${s.A.BASE_URL}/ping`,{method:"HEAD"})).ok}catch{return!1}}static async retryFailedUploads(e,t){try{return(await Promise.allSettled(t.map((t=>this.addStory(e,t.data))))).map(((e,r)=>({originalUpload:t[r],success:"fulfilled"===e.status,response:"fulfilled"===e.status?e.value:e.reason})))}catch(e){return console.error("Error retrying failed uploads:",e),{error:!0,message:e.message}}}}}}]);