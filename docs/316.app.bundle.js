"use strict";(self.webpackChunkstory_explorer=self.webpackChunkstory_explorer||[]).push([[316],{115:(e,t,n)=>{n.d(t,{A:()=>r});const r={BASE_URL:"https://story-api.dicoding.dev/v1",VAPID_PUBLIC_KEY:"BCCs2eonMI-6H2ctvFaWg-UYdDv387Vno_bzUzALpB442r2lCnsHmtrx8biyPi_E-1fSGABK_Qs_GlvPoJJqxbk",DEFAULT_MAP_CENTER:{lat:-6.2,lon:106.816666},MAP_OPTIONS:{DEFAULT_ZOOM:5,TILE_LAYER:{DEFAULT:"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",SATELLITE:"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}"}}}},316:(e,t,n)=>{n.r(t),n.d(t,{default:()=>a});var r=n(628),o=n(844);const a=class{constructor(){this._container=document.querySelector("#mainContent")}async render(){return'\n            <style>\n                .offline-container {\n                    max-width: 1200px;\n                    margin: 2rem auto;\n                    padding: 1rem;\n                }\n\n                .offline-header {\n                    text-align: center;\n                    margin-bottom: 2rem;\n                    padding: 1rem;\n                    background: #f8f9fa;\n                    border-radius: 8px;\n                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n                }\n\n                .connection-status {\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                    gap: 0.5rem;\n                    color: #dc3545;\n                }\n\n                .content-header {\n                    display: flex;\n                    justify-content: space-between;\n                    align-items: center;\n                    margin-bottom: 2rem;\n                }\n\n                .view-toggle {\n                    display: flex;\n                    gap: 0.5rem;\n                }\n\n                .view-toggle button {\n                    padding: 0.5rem 1rem;\n                    border: 1px solid #dee2e6;\n                    background: white;\n                    border-radius: 4px;\n                    cursor: pointer;\n                }\n\n                .view-toggle button.active {\n                    background: #007bff;\n                    color: white;\n                    border-color: #007bff;\n                }\n\n                .story-list {\n                    display: grid;\n                    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n                    gap: 1.5rem;\n                }\n\n                .story-card {\n                    background: white;\n                    border-radius: 8px;\n                    overflow: hidden;\n                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n                }\n\n                .story-image {\n                    width: 100%;\n                    height: 200px;\n                    object-fit: cover;\n                }\n\n                .story-details {\n                    padding: 1rem;\n                }\n\n                .story-actions {\n                    display: flex;\n                    justify-content: space-between;\n                    gap: 0.5rem;\n                    padding: 0.5rem;\n                }\n\n                .toggle-favorite, .delete-story {\n                    padding: 0.5rem 1rem;\n                    border-radius: 4px;\n                    cursor: pointer;\n                    display: flex;\n                    align-items: center;\n                    gap: 0.5rem;\n                    min-width: 44px;\n                    min-height: 44px;\n                }\n\n                .toggle-favorite {\n                    background: white;\n                    border: 1px solid #dc3545;\n                    color: #dc3545;\n                }\n\n                .delete-story {\n                    background: #dc3545;\n                    color: white;\n                    border: none;\n                }\n\n                .empty-state {\n                    text-align: center;\n                    padding: 3rem;\n                    background: #f8f9fa;\n                    border-radius: 8px;\n                    color: #666;\n                    display: none;\n                }\n\n                .feedback-message {\n                    position: fixed;\n                    bottom: 20px;\n                    right: 20px;\n                    padding: 1rem;\n                    border-radius: 4px;\n                    color: white;\n                    z-index: 1000;\n                }\n\n                .feedback-message.success {\n                    background: #28a745;\n                }\n\n                .feedback-message.error {\n                    background: #dc3545;\n                }\n\n                @media (max-width: 768px) {\n                    .offline-container {\n                        margin: 1rem;\n                    }\n                    .story-list {\n                        grid-template-columns: 1fr;\n                    }\n                }\n            </style>\n            <div class="offline-container">\n                <header class="offline-header">\n                    <h2>Mode Offline</h2>\n                    <p class="connection-status">\n                        <i class="fas fa-wifi-slash"></i> \n                        Anda sedang dalam mode offline\n                    </p>\n                </header>\n\n                <div class="offline-content">\n                    <div class="content-header">\n                        <h3>Cerita Favorit & Tersimpan</h3>\n                        <div class="view-toggle">\n                            <button id="showAll" class="active">Semua</button>\n                            <button id="showFavorites">Favorit</button>\n                        </div>\n                    </div>\n                    <div id="offlineStoryList" class="story-list"></div>\n                    \n                    <div id="emptyState" class="empty-state" style="display: none">\n                        <i class="fas fa-inbox"></i>\n                        <p>Tidak ada cerita tersimpan untuk mode offline</p>\n                    </div>\n                </div>\n            </div>\n        '}_createStoryCard(e){const t=e.isFavorite;return`\n            <article class="story-card ${t?"favorite":""}" data-id="${e.id}">\n                <img src="${e.photoUrl}" \n                    alt="Foto cerita ${e.name}"\n                    class="story-image"\n                    loading="lazy"\n                    onerror="this.src='/images/placeholder.jpg'">\n                <div class="story-details">\n                    <h3>${e.name}</h3>\n                    <p>${e.description}</p>\n                    <time datetime="${e.createdAt}">\n                        ${new Date(e.createdAt).toLocaleDateString("id-ID")}\n                    </time>\n                    <div class="story-actions">\n                        <button class="toggle-favorite" data-id="${e.id}">\n                            <i class="fas ${t?"fa-heart":"fa-heart-o"}"></i>\n                            ${t?"Hapus dari Favorit":"Tambah ke Favorit"}\n                        </button>\n                        <button class="delete-story" data-id="${e.id}">\n                            <i class="fas fa-trash"></i> Hapus\n                        </button>\n                    </div>\n                </div>\n            </article>\n        `}_initializeEventListeners(){document.querySelectorAll(".delete-story").forEach((e=>{e.addEventListener("click",(async e=>{const t=e.target.closest(".delete-story").dataset.id;confirm("Apakah Anda yakin ingin menghapus cerita ini?")&&await this._deleteStory(t)}))})),document.querySelectorAll(".toggle-favorite").forEach((e=>{e.addEventListener("click",(async e=>{const t=e.target.closest(".toggle-favorite").dataset.id,n=await r.A.getStory(t);n.isFavorite?await o.A.removeFromFavorites(t):await o.A.addToFavorites(n),await this._loadAllStories()}))}));const e=document.getElementById("showAll"),t=document.getElementById("showFavorites");e?.addEventListener("click",(async()=>{e.classList.add("active"),t.classList.remove("active"),await this._loadAllStories()})),t?.addEventListener("click",(async()=>{t.classList.add("active"),e.classList.remove("active"),await this._loadFavoriteStories()}))}async _loadFavoriteStories(){try{const e=await o.A.getFavorites(),t=document.getElementById("offlineStoryList"),n=document.getElementById("emptyState");if(!e.length)return n.style.display="flex",n.querySelector("p").textContent="Tidak ada cerita favorit",void(t.innerHTML="");n.style.display="none",t.innerHTML=e.map((e=>this._createStoryCard(e))).join(""),this._initializeEventListeners()}catch(e){console.error("Error loading favorite stories:",e),this._showError("Gagal memuat cerita favorit")}}async afterRender(){await this._loadAllStories(),this._initializeEventListeners(),this._checkOnlineStatus()}async _loadAllStories(){try{const[e,t]=await Promise.all([r.A.getStories(),o.A.getFavorites()]),n=[...e,...t].filter(((e,t,n)=>t===n.findIndex((t=>t.id===e.id)))),a=document.getElementById("offlineStoryList"),i=document.getElementById("emptyState");if(!n.length)return void(i.style.display="flex");a.innerHTML=n.map((e=>this._createStoryCard(e))).join("")}catch(e){console.error("Error loading stories:",e),this._showError("Gagal memuat cerita")}}async _deleteStory(e){try{await Promise.all([r.A.deleteStory(e),o.A.removeFromFavorites(e)]),await this._loadAllStories(),this._showFeedback("Cerita berhasil dihapus")}catch(e){console.error("Error deleting story:",e),this._showError("Gagal menghapus cerita")}}_checkOnlineStatus(){window.addEventListener("online",(()=>{this._showFeedback("Koneksi tersedia, mengalihkan ke mode online..."),setTimeout((()=>{window.location.hash="#/home"}),2e3)}))}_showFeedback(e,t=!1){const n=document.createElement("div");n.className="feedback-message "+(t?"error":"success"),n.textContent=e,this._container.appendChild(n),setTimeout((()=>n.remove()),3e3)}_showError(e){this._showFeedback(e,!0)}async cleanup(){window.removeEventListener("online",this._checkOnlineStatus)}}},628:(e,t,n)=>{n.d(t,{A:()=>i}),n(115);const r="stories",o="offline-stories",a=()=>new Promise(((e,t)=>{const n=indexedDB.open("story-explorer-db",1);n.onerror=()=>{t(n.error)},n.onsuccess=()=>{e(n.result)},n.onupgradeneeded=e=>{const t=e.target.result;t.objectStoreNames.contains(r)||t.createObjectStore(r,{keyPath:"id"}).createIndex("createdAt","createdAt",{unique:!1}),t.objectStoreNames.contains(o)||t.createObjectStore(o,{keyPath:"id",autoIncrement:!0}).createIndex("timestamp","timestamp",{unique:!1})}})),i={async getStories(){try{const e=await a();return new Promise(((t,n)=>{const o=e.transaction(r,"readonly").objectStore(r).getAll();o.onsuccess=()=>t(o.result),o.onerror=()=>n(o.error)}))}catch(e){return console.error("Error getting stories:",e),[]}},async saveStories(e){try{const t=(await a()).transaction(r,"readwrite").objectStore(r);return await Promise.all(e.map((e=>new Promise(((n,r)=>{const o=t.put({...e,timestamp:(new Date).getTime()});o.onsuccess=()=>n(),o.onerror=()=>r(o.error)}))))),!0}catch(e){return console.error("Error saving stories:",e),!1}},async saveOfflineStory(e){try{const t=(await a()).transaction(o,"readwrite").objectStore(o);return new Promise(((n,r)=>{const o=t.add({...e,timestamp:(new Date).getTime(),synced:!1});o.onsuccess=()=>n(!0),o.onerror=()=>r(o.error)}))}catch(e){return console.error("Error saving offline story:",e),!1}},async getOfflineStories(){try{const e=(await a()).transaction(o,"readonly").objectStore(o);return new Promise(((t,n)=>{const r=e.getAll();r.onsuccess=()=>t(r.result),r.onerror=()=>n(r.error)}))}catch(e){return console.error("Error getting offline stories:",e),[]}},async deleteStory(e){try{const t=(await a()).transaction(r,"readwrite").objectStore(r);return new Promise(((n,r)=>{const o=t.delete(e);o.onsuccess=()=>n(!0),o.onerror=()=>r(o.error)}))}catch(e){return console.error("Error deleting story:",e),!1}},async clearOldStories(e=6048e5){try{const t=(await a()).transaction(r,"readwrite").objectStore(r).index("createdAt"),n=(new Date).getTime()-e,o=t.openCursor();return new Promise(((e,t)=>{o.onsuccess=t=>{const r=t.target.result;r?(r.value.timestamp<n&&r.delete(),r.continue()):e(!0)},o.onerror=()=>t(o.error)}))}catch(e){return console.error("Error clearing old stories:",e),!1}}}},844:(e,t,n)=>{n.d(t,{A:()=>k});const r=(e,t)=>t.some((t=>e instanceof t));let o,a;const i=new WeakMap,s=new WeakMap,c=new WeakMap;let d={get(e,t,n){if(e instanceof IDBTransaction){if("done"===t)return i.get(e);if("store"===t)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return m(e[t])},set:(e,t,n)=>(e[t]=n,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function l(e){d=e(d)}function u(e){return"function"==typeof e?(t=e,(a||(a=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(g(this),e),m(this.request)}:function(...e){return m(t.apply(g(this),e))}):(e instanceof IDBTransaction&&function(e){if(i.has(e))return;const t=new Promise(((t,n)=>{const r=()=>{e.removeEventListener("complete",o),e.removeEventListener("error",a),e.removeEventListener("abort",a)},o=()=>{t(),r()},a=()=>{n(e.error||new DOMException("AbortError","AbortError")),r()};e.addEventListener("complete",o),e.addEventListener("error",a),e.addEventListener("abort",a)}));i.set(e,t)}(e),r(e,o||(o=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(e,d):e);var t}function m(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,n)=>{const r=()=>{e.removeEventListener("success",o),e.removeEventListener("error",a)},o=()=>{t(m(e.result)),r()},a=()=>{n(e.error),r()};e.addEventListener("success",o),e.addEventListener("error",a)}));return c.set(t,e),t}(e);if(s.has(e))return s.get(e);const t=u(e);return t!==e&&(s.set(e,t),c.set(t,e)),t}const g=e=>c.get(e),y=["get","getKey","getAll","getAllKeys","count"],p=["put","add","delete","clear"],f=new Map;function h(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(f.get(t))return f.get(t);const n=t.replace(/FromIndex$/,""),r=t!==n,o=p.includes(n);if(!(n in(r?IDBIndex:IDBObjectStore).prototype)||!o&&!y.includes(n))return;const a=async function(e,...t){const a=this.transaction(e,o?"readwrite":"readonly");let i=a.store;return r&&(i=i.index(t.shift())),(await Promise.all([i[n](...t),o&&a.done]))[0]};return f.set(t,a),a}l((e=>({...e,get:(t,n,r)=>h(t,n)||e.get(t,n,r),has:(t,n)=>!!h(t,n)||e.has(t,n)})));const v=["continue","continuePrimaryKey","advance"],w={},b=new WeakMap,S=new WeakMap,x={get(e,t){if(!v.includes(t))return e[t];let n=w[t];return n||(n=w[t]=function(...e){b.set(this,S.get(this)[t](...e))}),n}};async function*E(...e){let t=this;if(t instanceof IDBCursor||(t=await t.openCursor(...e)),!t)return;const n=new Proxy(t,x);for(S.set(n,t),c.set(n,g(t));t;)yield n,t=await(b.get(n)||t.continue()),b.delete(n)}function I(e,t){return t===Symbol.asyncIterator&&r(e,[IDBIndex,IDBObjectStore,IDBCursor])||"iterate"===t&&r(e,[IDBIndex,IDBObjectStore])}l((e=>({...e,get:(t,n,r)=>I(t,n)?E:e.get(t,n,r),has:(t,n)=>I(t,n)||e.has(t,n)}))),n(628);const k=class{static async initDB(){if(!("indexedDB"in window))return console.error("IndexedDB not supported"),null;try{return await function(e,t,{blocked:n,upgrade:r,blocking:o,terminated:a}={}){const i=indexedDB.open(e,t),s=m(i);return r&&i.addEventListener("upgradeneeded",(e=>{r(m(i.result),e.oldVersion,e.newVersion,m(i.transaction),e)})),n&&i.addEventListener("blocked",(e=>n(e.oldVersion,e.newVersion,e))),s.then((e=>{a&&e.addEventListener("close",(()=>a())),o&&e.addEventListener("versionchange",(e=>o(e.oldVersion,e.newVersion,e)))})).catch((()=>{})),s}("story-explorer-db",2,{upgrade(e,t,n){e.objectStoreNames.contains("stories")||e.createObjectStore("stories",{keyPath:"id"}).createIndex("timestamp","createdAt"),e.objectStoreNames.contains("favorites")||e.createObjectStore("favorites",{keyPath:"id"}).createIndex("timestamp","createdAt")}})}catch(e){return console.error("Error initializing database:",e),null}}static async saveStory(e){const t=await this.initDB();await t.put("stories",e)}static async getStories(){return(await this.initDB()).getAllFromIndex("stories","timestamp")}static async deleteStory(e){const t=await this.initDB();await t.delete("stories",e)}static async addToFavorites(e){const t=await this.initDB();e.isFavorite=!0,await t.put("favorites",e),await this.saveStory(e)}static async removeFromFavorites(e){const t=await this.initDB();await t.delete("favorites",e);const n=await this.getStory(e);n&&(n.isFavorite=!1,await this.saveStory(n))}static async getStory(e){return(await this.initDB()).get("stories",e)}static async getFavorites(){return(await this.initDB()).getAllFromIndex("favorites","timestamp")}static async isFavorite(e){const t=await this.initDB();return!!await t.get("favorites",e)}}}}]);